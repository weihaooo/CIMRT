package fareTransaction;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.TerminalFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author yuting
 */
public class CardTappingSimulator extends javax.swing.JFrame {

    private CardTerminal acr122uCardTerminal = null;
    private String cardId;
    private String station;
    /**
     * Creates new form TapInFrame
     */
    public CardTappingSimulator() {
        initComponents();
        List<String> stations = getStations();
        for(int i=0;i<stations.size();i++){
            ddlStations.addItem(stations.get(i));
        }
        lbMsg.setText("");
        tbAmount.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        lbStation = new javax.swing.JLabel();
        ddlStations = new javax.swing.JComboBox<>();
        lbCardNo = new javax.swing.JLabel();
        tbCardNo = new javax.swing.JTextField();
        lbAmt = new javax.swing.JLabel();
        tbAmount = new javax.swing.JLabel();
        lbMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lbTitle.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lbTitle.setText("Card Tapping Simulator");

        lbStation.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbStation.setText("Station: ");

        ddlStations.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        ddlStations.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ddlStationsItemStateChanged(evt);
            }
        });

        lbCardNo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbCardNo.setText("Card Number: ");

        tbCardNo.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        tbCardNo.setPreferredSize(new java.awt.Dimension(230, 30));

        lbAmt.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbAmt.setText("Amount: ");

        tbAmount.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tbAmount.setText("0.0");

        lbMsg.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbCardNo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbStation, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbAmt, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbMsg)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tbCardNo, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                .addComponent(ddlStations, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tbAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(135, 135, 135))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lbTitle)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ddlStations, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbStation))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCardNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbCardNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbAmt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tbAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbMsg)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
//            ActionListener actionListenerQuitOnNoReaderAttached = new ActionListener() {
//                public void actionPerformed(ActionEvent event) {
//                    quitOnNoReaderAttached();
//                }
//            };

//            Timer timerQuitOnNoReaderAttached = new Timer(5000, actionListenerQuitOnNoReaderAttached);
//            timerQuitOnNoReaderAttached.setRepeats(false);
//            timerQuitOnNoReaderAttached.start();

            TerminalFactory terminalFactory = TerminalFactory.getDefault();

            if (!terminalFactory.terminals().list().isEmpty()) {
                for (CardTerminal cardTerminal : terminalFactory.terminals().list()) {
                    if (cardTerminal.getName().contains("ACS ACR122")) {
                        acr122uCardTerminal = cardTerminal;

                        break;
                    }
                }

                if (acr122uCardTerminal != null) {
                    //timerQuitOnNoReaderAttached.stop();

                    //jTextFieldAttachedReader.setText(acr122uCardTerminal.getName());
                    ActionListener actionListenerCheckCardPresent = new ActionListener() {
                        public void actionPerformed(ActionEvent event) {
                            checkCardPresent();
                        }
                    };

                    Timer timerCheckCardPresent = new Timer(5000, actionListenerCheckCardPresent);
                    timerCheckCardPresent.setRepeats(true);
                    timerCheckCardPresent.start();

                    //JOptionPane.showMessageDialog(this, "ACS ACR122U Reader detected successfully", "Reader Detected Successful", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to detect ACS ACR122U Reader", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
                    this.setVisible(false);
                    this.dispose();
                }
            } else {
                JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
                this.setVisible(false);
                this.dispose();
            }
            } catch (Exception ex) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void ddlStationsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ddlStationsItemStateChanged
        station = String.valueOf(evt.getItem());
        station = station.substring(6);
        // TODO add your handling code here:
    }//GEN-LAST:event_ddlStationsItemStateChanged

    private void checkCardPresent() {
        try {
            if (acr122uCardTerminal.isCardPresent()) {
                byte[] byteArrayReadUID = {(byte) 0xFF, (byte) 0xCA, (byte) 0x00, (byte) 0x00, (byte) 0x00};
                tbCardNo.setText(connectToCard(byteArrayReadUID));
                tbCardNo.setForeground(Color.GREEN);
                
                cardId = connectToCard(byteArrayReadUID);
                String status = createFareTransaction(cardId,station);
                tbAmount.setText(String.format("%.2f", Double.parseDouble(getRefundAmt(cardId))));
                if(status.equals("Tap in")){
                    lbMsg.setText("Tap in successful! Have a nice trip!");
                }
                else if(status.equals("Insufficient amount")){
                    lbMsg.setText("Insufficient card value! Please top up!");
                }
                else{
                    
                    lbMsg.setText("Trip Fare = "+ String.format("%.2f", Double.parseDouble(status)));
                }
            } else {
                tbCardNo.setText("No Card Detected!");
                tbCardNo.setForeground(Color.RED);
                lbMsg.setText("");
                tbAmount.setText("");
            }
        } catch (Exception ex) {
        }
    }

    private String connectToCard(byte[] byteArrayReadUID) {
        try {
            acr122uCardTerminal.waitForCardPresent(0);
            Card card = acr122uCardTerminal.connect("T=1");
            CardChannel cardChannel = card.getBasicChannel();

            return send(byteArrayReadUID, cardChannel);
        } catch (Exception ex) {
            return "";
        }
    }

    public String send(byte[] command, CardChannel cardChannel) {
        String response = "";

        byte[] byteArrayResponse = new byte[258];
        ByteBuffer bufferedCommand = ByteBuffer.wrap(command);
        ByteBuffer bufferedResponse = ByteBuffer.wrap(byteArrayResponse);

        // output = The length of the received response APDU
        int output = 0;

        try {
            output = cardChannel.transmit(bufferedCommand, bufferedResponse);
        } catch (CardException ex) {
            ex.printStackTrace();
        }

        for (int i = 0; i < output; i++) {
            response += String.format("%02X", byteArrayResponse[i]);
        }

        return response;
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardTappingSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardTappingSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardTappingSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardTappingSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CardTappingSimulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ddlStations;
    private javax.swing.JLabel lbAmt;
    private javax.swing.JLabel lbCardNo;
    private javax.swing.JLabel lbMsg;
    private javax.swing.JLabel lbStation;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel tbAmount;
    private javax.swing.JTextField tbCardNo;
    // End of variables declaration//GEN-END:variables

    private static java.util.List<java.lang.String> getStations() {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getStations();
    }

  /*  private static java.util.List<java.lang.String> getStations() {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getStations();
    }

    private static String getRefundAmt(java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getRefundAmt(cardId);
    }

    private static String createFareTransaction(java.lang.String cardId, java.lang.String startStation) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.createFareTransaction(cardId, startStation);
    }
*/

    private static String getRefundAmt(java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getRefundAmt(cardId);
    }

    private static String createFareTransaction(java.lang.String cardId, java.lang.String startStation) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.createFareTransaction(cardId, startStation);
    }

    

    

}
