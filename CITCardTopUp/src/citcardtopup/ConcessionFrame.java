/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package citcardtopup;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.nio.ByteBuffer;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.smartcardio.Card;
import javax.smartcardio.CardChannel;
import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.smartcardio.TerminalFactory;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.DocumentListener;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import org.w3c.dom.events.DocumentEvent;

/**
 *
 * @author user
 */
public class ConcessionFrame extends javax.swing.JFrame {

    /**
     * Creates new form ConcessionFrame
     */
    private CardTerminal acr122uCardTerminal = null;
    Date end = new Date();
    Date today = new Date();

    public ConcessionFrame() {
        initComponents();
    }

    public ConcessionFrame(String staff, String type) {
        initComponents();
        lbStaff.setText(staff);
        lbTopUpType.setText(type);
        tbStart.setVisible(false);
        tbAmount.setVisible(false);
        btnTopUp.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLogout = new javax.swing.JLabel();
        lbWelcome = new javax.swing.JLabel();
        lbStaff = new javax.swing.JLabel();
        lbTitle = new javax.swing.JLabel();
        lbType = new javax.swing.JLabel();
        lbTopUpType = new javax.swing.JLabel();
        lbCardNo = new javax.swing.JLabel();
        tbCardNo = new javax.swing.JTextField();
        lbStart = new javax.swing.JLabel();
        tbStart = new org.jdesktop.swingx.JXDatePicker();
        lbAmount = new javax.swing.JLabel();
        btnTopUp = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lbMsg = new javax.swing.JLabel();
        lbRequired1 = new javax.swing.JLabel();
        lbRequired2 = new javax.swing.JLabel();
        lbRequired3 = new javax.swing.JLabel();
        tbAmount = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lbLogout1 = new javax.swing.JLabel();

        lbLogout.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbLogout.setText("Log Out");
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbLogoutMousePressed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lbWelcome.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbWelcome.setText("ID: ");

        lbStaff.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbStaff.setText("Station Staff");

        lbTitle.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lbTitle.setText("CIT Card System");

        lbType.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbType.setText("Top Up Type: ");

        lbTopUpType.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbTopUpType.setText("Type");

        lbCardNo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbCardNo.setText("Card Number: ");

        tbCardNo.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        tbCardNo.setPreferredSize(new java.awt.Dimension(230, 30));

        lbStart.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbStart.setText("Start Date: ");

        tbStart.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        tbStart.setPreferredSize(new java.awt.Dimension(90, 30));

        lbAmount.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbAmount.setText("Amount: ");

        btnTopUp.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnTopUp.setText("Top Up");
        btnTopUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopUpActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lbMsg.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lbMsg.setForeground(new java.awt.Color(204, 0, 0));

        lbRequired1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbRequired1.setText("*");

        lbRequired2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbRequired2.setText("*");

        lbRequired3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbRequired3.setText("*");

        tbAmount.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        btnClear.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lbLogout1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lbLogout1.setText("Log Out");
        lbLogout1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogout1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbLogout1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbWelcome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbStaff))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(btnTopUp)
                                .addGap(105, 105, 105)
                                .addComponent(btnClear)
                                .addGap(33, 33, 33)
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbCardNo)
                                    .addComponent(lbType)
                                    .addComponent(lbStart)
                                    .addComponent(lbAmount))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbRequired1)
                                    .addComponent(lbRequired2)
                                    .addComponent(lbRequired3))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tbStart, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbTopUpType, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbLogout1))
                                    .addComponent(tbCardNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(lbMsg))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbWelcome)
                    .addComponent(lbStaff)
                    .addComponent(lbLogout1))
                .addGap(27, 27, 27)
                .addComponent(lbTitle)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbType)
                    .addComponent(lbTopUpType))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCardNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRequired2)
                    .addComponent(tbCardNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbStart)
                    .addComponent(lbRequired1)
                    .addComponent(tbStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbAmount)
                        .addComponent(lbRequired3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTopUp)
                    .addComponent(btnClear)
                    .addComponent(btnBack))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        String staff = lbStaff.getText();
        this.setVisible(false);
        TopUpFrame tpFrame = new TopUpFrame(staff);
        tpFrame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
//            ActionListener actionListenerQuitOnNoReaderAttached = new ActionListener() {
//                public void actionPerformed(ActionEvent event) {
//                    quitOnNoReaderAttached();
//                }
//            };

//            Timer timerQuitOnNoReaderAttached = new Timer(5000, actionListenerQuitOnNoReaderAttached);
//            timerQuitOnNoReaderAttached.setRepeats(false);
//            timerQuitOnNoReaderAttached.start();

            TerminalFactory terminalFactory = TerminalFactory.getDefault();

            if (!terminalFactory.terminals().list().isEmpty()) {
                for (CardTerminal cardTerminal : terminalFactory.terminals().list()) {
                    if (cardTerminal.getName().contains("ACS ACR122")) {
                        acr122uCardTerminal = cardTerminal;

                        break;
                    }
                }

                if (acr122uCardTerminal != null) {
                    //timerQuitOnNoReaderAttached.stop();

                    //jTextFieldAttachedReader.setText(acr122uCardTerminal.getName());
                    ActionListener actionListenerCheckCardPresent = new ActionListener() {
                        public void actionPerformed(ActionEvent event) {
                            checkCardPresent();
                        }
                    };

                    Timer timerCheckCardPresent = new Timer(5000, actionListenerCheckCardPresent);
                    timerCheckCardPresent.setRepeats(true);
                    timerCheckCardPresent.start();

                    //JOptionPane.showMessageDialog(this, "ACS ACR122U Reader detected successfully", "Reader Detected Successful", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to detect ACS ACR122U Reader", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
                    this.setVisible(false);
                    this.dispose();
                }
            } else {
                JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
                this.setVisible(false);
                this.dispose();
            }
            } catch (Exception ex) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void btnTopUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopUpActionPerformed
        //String type, double amount, Date transDate, String staffId, Date start, String cardId
        if (!tbCardNo.getText().equals("No Card Detected!") && tbStart.getDate() != null && tbAmount.getText()!="") {
            String type = lbTopUpType.getText();
            double amount = Double.parseDouble(tbAmount.getText());
            Date transDate = new Date();
            String staffId = lbStaff.getText();
            Date start = tbStart.getDate();
            String cardId = tbCardNo.getText();
            GregorianCalendar calendarTrans = new GregorianCalendar();
            calendarTrans.setTime(transDate);
            XMLGregorianCalendar xmlTrans = null;
            try {
                xmlTrans = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendarTrans);
            } catch (DatatypeConfigurationException ex) {
                Logger.getLogger(ConcessionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            GregorianCalendar calendarStart = new GregorianCalendar();
            calendarStart.setTime(start);
            XMLGregorianCalendar xmlStart = null;
            try {
                xmlStart = DatatypeFactory.newInstance().newXMLGregorianCalendar(calendarStart);
            } catch (DatatypeConfigurationException ex) {
                Logger.getLogger(ConcessionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            createTransaction(type, amount, xmlTrans, staffId, xmlStart, cardId);
            tbStart.setDate(null);
            tbAmount.setText("");
            lbMsg.setText("Top up successfully!");
        } else {
            lbMsg.setText("The reqired filed is missing!");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnTopUpActionPerformed
//        String cardNo = tbCardNo.getText();
//        if (cardNo != null && !cardNo.equals("No Card Detected!")) { //check whether card has been detected
//            if (!isExpired(cardNo)) {
//                end = getConcessionEnd(cardNo).toGregorianCalendar().getTime();
//                if (end.before(today)) {
//                    end = today;
//                } else {
//                    Calendar cal = Calendar.getInstance();
//                    cal.setTime(end);
//                    cal.add(Calendar.DATE, 1);
//                    end = cal.getTime();
//                }
//                tbStart.getMonthView().setLowerBound(end);
//                tbAmount.setText(String.valueOf(getAmount(cardNo)));
//            }
//            else{
//                lbMsg.setText("The CITCard is expired!");
//            }
//        } else {
//            lbMsg.setText("No Card Detected!");
//        }
//        tbStart.setVisible(true);
//        tbAmount.setVisible(true);
//        btnTopUp.setVisible(true);
        // TODO add your handling code here:
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        tbStart.setVisible(false);
        tbAmount.setText("");
        lbMsg.setText("");
        tbAmount.setVisible(false);
        btnTopUp.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseClicked
        JOptionPane.showMessageDialog(this, "Confirm logout?", "Logout", JOptionPane.ERROR_MESSAGE);
        this.setVisible(false);
        LoginFrame lFrame = new LoginFrame();
        lFrame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbLogoutMouseClicked

    private void lbLogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMousePressed
        JOptionPane.showMessageDialog(this, "Confirm logout?", "Logout", JOptionPane.ERROR_MESSAGE);
        this.setVisible(false);
        LoginFrame lFrame = new LoginFrame();
        lFrame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbLogoutMousePressed

    private void lbLogout1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogout1MouseClicked
        JOptionPane.showMessageDialog(this, "Confirm logout?", "Logout", JOptionPane.ERROR_MESSAGE);
        this.setVisible(false);
        LoginFrame lFrame = new LoginFrame();
        lFrame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbLogout1MouseClicked

    private void lbLogout1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogout1MousePressed
        JOptionPane.showMessageDialog(this, "Confirm logout?", "Logout", JOptionPane.ERROR_MESSAGE);
        this.setVisible(false);
        LoginFrame lFrame = new LoginFrame();
        lFrame.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_lbLogout1MousePressed
//    private void quitOnNoReaderAttached() {
//        JOptionPane.showMessageDialog(this, "No card reader is attached", "Reader Detected Failure", JOptionPane.ERROR_MESSAGE);
//        this.setVisible(false);
//        this.dispose();
//    }

    private void checkCardPresent() {
        try {
            if (acr122uCardTerminal.isCardPresent()) {
                byte[] byteArrayReadUID = {(byte) 0xFF, (byte) 0xCA, (byte) 0x00, (byte) 0x00, (byte) 0x00};
                tbCardNo.setText(connectToCard(byteArrayReadUID));
                tbCardNo.setForeground(Color.GREEN);
                String cardNo = tbCardNo.getText();
        // start of get details button
        if (cardNo != null && !cardNo.equals("No Card Detected!")) { //check whether card has been detected
            if (!isExpired(cardNo)) {
                end = getConcessionEnd(cardNo).toGregorianCalendar().getTime();
                if (end.before(today)) {
                    end = today;
                } else {
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(end);
                    cal.add(Calendar.DATE, 1);
                    end = cal.getTime();
                }
                tbStart.getMonthView().setLowerBound(end);
                tbAmount.setText(String.valueOf(getAmount(cardNo)));
                lbMsg.setText("");
            }
            else{
                btnTopUp.setVisible(false);
                lbMsg.setText("The CITCard is expired!");
                tbAmount.setText("");
            }
        } else {
            lbMsg.setText("No Card Detected!");
        }
        tbStart.setVisible(true);
        tbAmount.setVisible(true);
        btnTopUp.setVisible(true);
        
        // end of get details button
            } else {
                tbCardNo.setText("No Card Detected!");
                tbCardNo.setForeground(Color.RED);
            }
        } catch (Exception ex) {
        }
    }

    private String connectToCard(byte[] byteArrayReadUID) {
        try {
            acr122uCardTerminal.waitForCardPresent(0);
            Card card = acr122uCardTerminal.connect("T=1");
            CardChannel cardChannel = card.getBasicChannel();

            return send(byteArrayReadUID, cardChannel);
        } catch (Exception ex) {
            return "";
        }
    }

    public String send(byte[] command, CardChannel cardChannel) {
        String response = "";

        byte[] byteArrayResponse = new byte[258];
        ByteBuffer bufferedCommand = ByteBuffer.wrap(command);
        ByteBuffer bufferedResponse = ByteBuffer.wrap(byteArrayResponse);

        // output = The length of the received response APDU
        int output = 0;

        try {
            output = cardChannel.transmit(bufferedCommand, bufferedResponse);
        } catch (CardException ex) {
            ex.printStackTrace();
        }

        for (int i = 0; i < output; i++) {
            response += String.format("%02X", byteArrayResponse[i]);
        }

        return response;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConcessionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConcessionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConcessionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConcessionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConcessionFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnTopUp;
    private javax.swing.JLabel lbAmount;
    private javax.swing.JLabel lbCardNo;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JLabel lbLogout1;
    private javax.swing.JLabel lbMsg;
    private javax.swing.JLabel lbRequired1;
    private javax.swing.JLabel lbRequired2;
    private javax.swing.JLabel lbRequired3;
    private javax.swing.JLabel lbStaff;
    private javax.swing.JLabel lbStart;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbTopUpType;
    private javax.swing.JLabel lbType;
    private javax.swing.JLabel lbWelcome;
    private javax.swing.JLabel tbAmount;
    private javax.swing.JTextField tbCardNo;
    private org.jdesktop.swingx.JXDatePicker tbStart;
    // End of variables declaration//GEN-END:variables

    private static XMLGregorianCalendar getConcessionEnd(java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getConcessionEnd(cardId);
    }

  /*  private static XMLGregorianCalendar getConcessionEnd(java.lang.String cardId) {
        passenger.sessionbean.ws.LoginWebService_Service service = new passenger.sessionbean.ws.LoginWebService_Service();
        passenger.sessionbean.ws.LoginWebService port = service.getLoginWebServicePort();
        return port.getConcessionEnd(cardId);
    }

    private static void createTransaction(java.lang.String type, double amount, javax.xml.datatype.XMLGregorianCalendar transDate, java.lang.String staffId, javax.xml.datatype.XMLGregorianCalendar start, java.lang.String cardId) {
        passenger.sessionbean.ws.LoginWebService_Service service = new passenger.sessionbean.ws.LoginWebService_Service();
        passenger.sessionbean.ws.LoginWebService port = service.getLoginWebServicePort();
        port.createTransaction(type, amount, transDate, staffId, start, cardId);
    }

    private static double getAmount(java.lang.String cardId) {
        passenger.sessionbean.ws.LoginWebService_Service service = new passenger.sessionbean.ws.LoginWebService_Service();
        passenger.sessionbean.ws.LoginWebService port = service.getLoginWebServicePort();
        return port.getAmount(cardId);
    }

    private static boolean isExpired(java.lang.String cardId) {
        passenger.sessionbean.ws.LoginWebService_Service service = new passenger.sessionbean.ws.LoginWebService_Service();
        passenger.sessionbean.ws.LoginWebService port = service.getLoginWebServicePort();
        return port.isExpired(cardId);
    }*/

    private static void createTransaction(java.lang.String type, double amount, javax.xml.datatype.XMLGregorianCalendar transDate, java.lang.String staffId, javax.xml.datatype.XMLGregorianCalendar start, java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        port.createTransaction(type, amount, transDate, staffId, start, cardId);
    }

    private static double getAmount(java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.getAmount(cardId);
    }

    private static boolean isExpired(java.lang.String cardId) {
        ws.client.LoginWebService_Service service = new ws.client.LoginWebService_Service();
        ws.client.LoginWebService port = service.getLoginWebServicePort();
        return port.isExpired(cardId);
    }
}
